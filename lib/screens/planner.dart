import 'package:flutter/material.dart';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:open_file/open_file.dart';
import '../services/gemini_api.dart';
import '../models/meal_plan.dart';

class PlannerScreen extends StatefulWidget {
  const PlannerScreen({super.key});

  @override
  State<PlannerScreen> createState() => _PlannerScreenState();
}

class _PlannerScreenState extends State<PlannerScreen> {
  // Selected diet
  String _selectedDiet = 'None';
  final List<String> _dietOptions = [
    'None',
    'Vegan',
    'Nut-free',
    'Vegetarian',
    'Keto',
    'Gluten-free',
    'Dairy-free',
  ];

  // Quiz questions
  final List<Map<String, dynamic>> _questions = [
    {
      'question': 'How would you describe your cooking skill level?',
      'options': ['Beginner', 'Intermediate', 'Advanced'],
      'answer': 'Beginner',
    },
    {
      'question': 'How much time do you have for meal preparation?',
      'options': ['15 minutes or less', '30 minutes', '1 hour or more'],
      'answer': '30 minutes',
    },
    {
      'question': 'Do you have any food allergies?',
      'options': ['None', 'Dairy', 'Nuts', 'Gluten', 'Seafood'],
      'answer': 'None',
    },
    {
      'question': 'What is your primary goal for meal planning?',
      'options': [
        'Weight loss',
        'Muscle building',
        'Maintenance',
        'Energy boost',
      ],
      'answer': 'Maintenance',
    },
    {
      'question': 'How many people are you cooking for?',
      'options': ['Just me', '2 people', '3-4 people', '5+ people'],
      'answer': 'Just me',
    },
    {
      'question': 'Do you prefer seasonal ingredients?',
      'options': ['Yes, always', 'When possible', 'No preference'],
      'answer': 'When possible',
    },
    {
      'question': 'How many meals would you like to prep in advance?',
      'options': ['None', '1-2 meals', '3-5 meals', 'All meals'],
      'answer': '1-2 meals',
    },
    {
      'question': 'What is your budget per meal?',
      'options': ['Budget-friendly', 'Moderate', 'Premium ingredients'],
      'answer': 'Moderate',
    },
    {
      'question': 'Do you have any cultural cuisine preferences?',
      'options': [
        'Asian',
        'Mediterranean',
        'American',
        'Indian',
        'Bangladeshi',
        'International Mix',
        'No preference',
      ],
      'answer': 'No preference',
    },
    {
      'question': 'Would you like to include snacks in your meal plan?',
      'options': ['Yes', 'No'],
      'answer': 'Yes',
    },
  ];

  // Meal plan data
  MealPlan? _mealPlan;
  bool _isLoading = false;

  // GroqAPI service
  final GeminiApiService _geminiApiService = GeminiApiService();

  Future<void> _generateMealPlan() async {
    setState(() {
      _isLoading = true;
    });

    try {
      // Convert questions and answers to a string format to send to the API
      final String userPreferences = _questions
          .map((q) {
            return '${q['question']}: ${q['answer']}';
          })
          .join('\n');

      // Use GeminiAPI service to generate meal plan
      final mealPlan = await _geminiApiService.generateMealPlan(
        userPreferences,
        _selectedDiet,
      );

      setState(() {
        _mealPlan = mealPlan;
      });
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error generating meal plan: $e')));
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _exportToPdf() async {
    if (_mealPlan == null) return;

    try {
      setState(() {
        _isLoading = true;
      });

      // Create a PDF document
      final pdf = pw.Document();

      // Add content to the PDF
      pdf.addPage(
        pw.MultiPage(
          pageFormat: PdfPageFormat.a4,
          margin: const pw.EdgeInsets.all(32),
          header: (pw.Context context) {
            return pw.Center(
              child: pw.Text(
                '7-Day Meal Plan',
                style: pw.TextStyle(
                  fontSize: 24,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
            );
          },
          footer: (pw.Context context) {
            return pw.Center(
              child: pw.Text(
                'Generated by FlavorLens',
                style: const pw.TextStyle(fontSize: 10),
              ),
            );
          },
          build: (pw.Context context) {
            return [
              pw.SizedBox(height: 20),
              pw.Text(
                'Dietary Filter: $_selectedDiet',
                style: pw.TextStyle(
                  fontSize: 16,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
              pw.SizedBox(height: 10),
              pw.Text(
                'Your Preferences:',
                style: pw.TextStyle(
                  fontSize: 16,
                  fontWeight: pw.FontWeight.bold,
                ),
              ),
              pw.SizedBox(height: 10),

              // Preferences section
              ...List.generate(
                _questions.length,
                (index) => pw.Text(
                  'â€¢ ${_questions[index]['question']}: ${_questions[index]['answer']}',
                  style: const pw.TextStyle(fontSize: 12),
                ),
              ),

              pw.SizedBox(height: 20),
              pw.Divider(),
              pw.SizedBox(height: 20),

              // Daily meal plans
              ...List.generate(_mealPlan!.days.length, (dayIndex) {
                final day = _mealPlan!.days[dayIndex];
                return pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text(
                      'Day ${dayIndex + 1}: ${_getDayName(dayIndex)}',
                      style: pw.TextStyle(
                        fontSize: 18,
                        fontWeight: pw.FontWeight.bold,
                      ),
                    ),
                    pw.Divider(),
                    pw.SizedBox(height: 10),

                    // Breakfast
                    pw.Text(
                      'Breakfast:',
                      style: pw.TextStyle(
                        fontSize: 14,
                        fontWeight: pw.FontWeight.bold,
                      ),
                    ),
                    pw.SizedBox(height: 5),
                    pw.Text(day.breakfast),
                    pw.SizedBox(height: 10),

                    // Lunch
                    pw.Text(
                      'Lunch:',
                      style: pw.TextStyle(
                        fontSize: 14,
                        fontWeight: pw.FontWeight.bold,
                      ),
                    ),
                    pw.SizedBox(height: 5),
                    pw.Text(day.lunch),
                    pw.SizedBox(height: 10),

                    // Dinner
                    pw.Text(
                      'Dinner:',
                      style: pw.TextStyle(
                        fontSize: 14,
                        fontWeight: pw.FontWeight.bold,
                      ),
                    ),
                    pw.SizedBox(height: 5),
                    pw.Text(day.dinner),

                    pw.SizedBox(height: 30),
                  ],
                );
              }),
            ];
          },
        ),
      );

      // Save the PDF to a file
      final output = await getTemporaryDirectory();
      final file = File('${output.path}/meal_plan.pdf');
      await file.writeAsBytes(await pdf.save());

      // Try to open the PDF
      try {
        await OpenFile.open(file.path);
      } catch (openError) {
        // Fallback if OpenFile fails
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('PDF saved at: ${file.path}'),
            duration: const Duration(seconds: 5),
            action: SnackBarAction(label: 'OK', onPressed: () {}),
          ),
        );
      }

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Meal plan exported successfully'),
          duration: Duration(seconds: 2),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('Error exporting PDF: $e')));
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child:
            _isLoading
                ? const Center(child: CircularProgressIndicator())
                : SingleChildScrollView(
                  padding: const EdgeInsets.fromLTRB(16.0, 24.0, 16.0, 16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Header
                      const Text(
                        'Weekly Meal Planner',
                        style: TextStyle(
                          fontSize: 28,
                          fontWeight: FontWeight.bold,
                          color: Colors.deepOrange,
                        ),
                      ),
                      Text(
                        'Create a personalized 7-day meal plan',
                        style: TextStyle(fontSize: 16, color: Colors.grey[600]),
                      ),
                      const SizedBox(height: 24),

                      // Diet filter dropdown
                      DropdownButtonFormField<String>(
                        decoration: const InputDecoration(
                          labelText: 'Dietary Filter',
                          border: OutlineInputBorder(),
                        ),
                        value: _selectedDiet,
                        items:
                            _dietOptions
                                .map(
                                  (diet) => DropdownMenuItem(
                                    value: diet,
                                    child: Text(diet),
                                  ),
                                )
                                .toList(),
                        onChanged: (value) {
                          setState(() {
                            _selectedDiet = value!;
                          });
                        },
                      ),

                      const SizedBox(height: 30),

                      // Quiz questions
                      const Text(
                        'Quick Preferences Quiz',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 10),

                      ...List.generate(
                        _questions.length,
                        (index) => Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              '${index + 1}. ${_questions[index]['question']}',
                              style: const TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 10),
                            Wrap(
                              spacing: 8,
                              children: List.generate(
                                _questions[index]['options'].length,
                                (optionIndex) => ChoiceChip(
                                  label: Text(
                                    _questions[index]['options'][optionIndex],
                                  ),
                                  selected:
                                      _questions[index]['answer'] ==
                                      _questions[index]['options'][optionIndex],
                                  onSelected: (selected) {
                                    if (selected) {
                                      setState(() {
                                        _questions[index]['answer'] =
                                            _questions[index]['options'][optionIndex];
                                      });
                                    }
                                  },
                                ),
                              ),
                            ),
                            const SizedBox(height: 20),
                          ],
                        ),
                      ),

                      const SizedBox(height: 20),

                      // Generate button
                      SizedBox(
                        width: double.infinity,
                        height: 50,
                        child: ElevatedButton(
                          onPressed: _isLoading ? null : _generateMealPlan,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.deepOrange,
                            foregroundColor: Colors.white,
                          ),
                          child:
                              _isLoading
                                  ? const CircularProgressIndicator(
                                    color: Colors.white,
                                  )
                                  : const Text(
                                    'Generate Meal Plan',
                                    style: TextStyle(fontSize: 18),
                                  ),
                        ),
                      ),

                      const SizedBox(height: 40),

                      // Generated meal plan
                      if (_mealPlan != null) ...[
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            const Text(
                              '7-Day Meal Plan',
                              style: TextStyle(
                                fontSize: 22,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            ElevatedButton.icon(
                              onPressed: _isLoading ? null : _exportToPdf,
                              icon: const Icon(Icons.picture_as_pdf),
                              label: const Text('Export as PDF'),
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.deepOrange.shade800,
                                foregroundColor: Colors.white,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 20),

                        // Days of the week
                        ...List.generate(7, (dayIndex) {
                          final day = _mealPlan!.days[dayIndex];
                          return Card(
                            margin: const EdgeInsets.only(bottom: 20),
                            elevation: 4,
                            child: Padding(
                              padding: const EdgeInsets.all(16),
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    'Day ${dayIndex + 1}: ${_getDayName(dayIndex)}',
                                    style: const TextStyle(
                                      fontSize: 18,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                  const Divider(),
                                  const SizedBox(height: 10),

                                  // Breakfast
                                  const Text(
                                    'Breakfast',
                                    style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.deepOrange,
                                    ),
                                  ),
                                  const SizedBox(height: 5),
                                  Text(day.breakfast),
                                  const SizedBox(height: 15),

                                  // Lunch
                                  const Text(
                                    'Lunch',
                                    style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.deepOrange,
                                    ),
                                  ),
                                  const SizedBox(height: 5),
                                  Text(day.lunch),
                                  const SizedBox(height: 15),

                                  // Dinner
                                  const Text(
                                    'Dinner',
                                    style: TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.deepOrange,
                                    ),
                                  ),
                                  const SizedBox(height: 5),
                                  Text(day.dinner),
                                ],
                              ),
                            ),
                          );
                        }),
                      ],
                    ],
                  ),
                ),
      ),
    );
  }

  String _getDayName(int dayIndex) {
    final List<String> days = [
      'Saturday',
      'Sunday',
      'Monday',
      'Tuesday',
      'Wednesday',
      'Thursday',
      'Friday',
    ];
    return days[dayIndex];
  }
}
